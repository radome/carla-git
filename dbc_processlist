#!/usr/bin/perl

=head1 Description

Fetch process count and load values for a given list of servers.
Note the default group (l.21) and group aliases (l.163).

=cut

use strict;
use warnings;
use Term::ANSIColor;

use HTTP::Request;
use JSON;
use LWP::UserAgent;

use Data::Dumper;
use Getopt::Long;

my $default_group = 'production';
my ($group, $type, $server_regex, $without_loads, $help);
GetOptions(
    "g|group=s" => \$group,
    "t|type=s"  => \$type,
    "s|server=s" => \$server_regex,
    "w|without_loads" => \$without_loads,
    "h|help" => \$help,
);
$type = $group if defined $group;
$type = $default_group unless defined $type;

if ($help){
    print("\nProgram: dbc_processlist (Fetch process count and load values for a given list of servers.)\n\nUSAGE:\ndbc_processlist [options]\n\nOPTIONS:\n-g <group>\tproduction | compara | eg | genebuild | all\n-w\t\tRun without load information\n-h\t\tShow this help and exit\n\n");
    exit;
  }

my %servers_per_group = ( 
    production => [
        'mysql-ens-mirror-1',
        'mysql-ens-sta-1',
        'mysql-ens-sta-2',
        'mysql-ens-general-prod-1',
        'mysql-ens-vertannot-staging',
    ],
    compara => [
        'mysql-ens-compara-prod-1', 
        'mysql-ens-compara-prod-2', 
        'mysql-ens-compara-prod-3',
        'mysql-ens-compara-prod-4',
        'mysql-ens-compara-prod-5',
        'mysql-ens-compara-prod-6',
        'mysql-ens-compara-prod-7',
        'mysql-ens-compara-prod-8',
        'mysql-ens-compara-prod-9',
        'mysql-ens-compara-prod-10',
        'mysql-ens-vertannot-staging',
    ],
    eg => [
        'mysql-ens-sta-3',
        'mysql-ens-sta-4',
        'mysql-ens-mirror-3',
        'mysql-ens-mirror-4',
        'mysql-ens-metazoa-prod-1',
        'mysql-ens-metazoa-prod-2',
        'mysql-ens-microbes-prod-1',
        'mysql-ens-microbes-prod-2',
        'mysql-ens-microbes-prod-3',
        'mysql-ens-plants-prod-1',
        'mysql-ens-plants-prod-2',
    ],
    genebuild => [
    'mysql-ens-genebuild-prod-1',
    'mysql-ens-genebuild-prod-2',
    'mysql-ens-genebuild-prod-3',
    'mysql-ens-genebuild-prod-4',
    'mysql-ens-genebuild-prod-5',
    'mysql-ens-genebuild-prod-6',
    'mysql-ens-genebuild-prod-7',
    ],
);

my @servers = @{ get_serverlist($type) };
my $break_line = "+-------------------------------+---------+---------+---------+----------+----------+\n";
print $break_line;
print "| host                          | p_count | load_1m | load_5m | load_15m | disk_pct |\n";
print $break_line;
foreach my $server ( @servers ) {
    # handle break_line formatting
    if ( $server eq 'break' ){
        print $break_line;
        next;
    }

    # figure out the rw user cmd for each server
    my $server_rw;
    if ( $server =~ /-eg-/ ) {
        $server_rw = "$server-ensrw";
    } else {
        $server_rw = "$server-ensadmin";
    }
    # fetch process list
	open( PL, '-|', "$server_rw -e 'SHOW PROCESSLIST' 2>&1" );
	my $p_count = 0;
	while ( my $line = <PL> ) {
		if ( $line =~ m/ERROR/ ){ # server not responding
			$p_count = 'NA';
			last;
		}
		$p_count++ if ( $line =~ m/^| [0-9]/ ); # count
	}
    if ($without_loads){
      my $loads = {'load_1m'=>'-', 'load_5m'=>'-', 'load_15m'=>'-', 'disk_used_pct'=>'-'};
      &fmt_print($server, $p_count, $loads);
    }
    else{
      my $loads = &check_load($server);
      &fmt_print($server, $p_count, $loads);
    }

}
print $break_line;

sub fmt_print {
    my ($host, $count, $loads) = @_;

    my $p = ( $count eq 'NA' ) ? 500 : $count;
    my $p_colour = choose_p_colour($p);

    print "| ";
    my $host_pad = sprintf '%-30s', $host;
    print( colored( ['', $p_colour, ''], $host_pad) );
    print "| ";
    # my $port_pad = sprintf '%-7s', $port;
    # print( colored( ['', $colour, ''], $port_pad) );
    # print "| ";
    my $processes = sprintf '%-8s', $count;
    print( colored( ['', $p_colour, ''], $processes) );

    # print "|";
    # print " " . sprintf('%-7s', $loads->{load_1m})  . " |";
    # print " " . sprintf('%-7s', $loads->{load_5m})  . " |";
    # print " " . sprintf('%-8s', $loads->{load_15m}) . " |\n";

    my ($l1_fmt, $l5_fmt, $l15_fmt, $dpct_fmt);

      $l1_fmt = sprintf('%-7s', $loads->{load_1m} // 'NA');
      $l5_fmt = sprintf('%-7s', $loads->{load_5m} // 'NA');
      $l15_fmt = sprintf('%-8s', $loads->{load_15m} // 'NA');
      $dpct_fmt = sprintf('%-8s', $loads->{disk_used_pct} // 'NA');

    print "| ";
    print( colored( ['', choose_load_colour($loads->{load_1m}, $loads->{n_cpus}), ''], $l1_fmt ) );
    print " | ";
    print( colored( ['', choose_load_colour($loads->{load_5m}, $loads->{n_cpus}), ''], $l5_fmt ) );
    print " | ";
    print( colored( ['', choose_load_colour($loads->{load_15m}, $loads->{n_cpus}), ''], $l15_fmt ) );
    print " | ";
    print( colored( ['', choose_disk_colour($loads->{disk_used_pct}), ''], $dpct_fmt ) );
    print " |\n";
}

sub choose_p_colour {
    my $p = shift;

    if ( $p < 100 ) { return 'white'  } 
    if ( $p < 250 ) { return 'cyan'   }
    if ( $p < 500 ) { return 'yellow' }
    return 'red';
}

sub choose_load_colour {
    my $load = shift;
    my $n_cpus = shift || 8;

    if ( not defined $load ) { return "red" }
    if ( $load eq "-" ) { return "red" }
    if ( $load < $n_cpus/2  ) { return "white"  }
    if ( $load < 2*$n_cpus ) { return "cyan"   }
    if ( $load < 4*$n_cpus ) { return "yellow" }
    return "red";
}

sub choose_disk_colour {
    my $disk = shift;
    if ( not defined $disk ) { return "red" }
    if ( $disk eq "-" ) { return "red" }
    if ( $disk < 50  ) { return "white"  }
    if ( $disk < 75 ) { return "cyan"   }
    if ( $disk < 90 ) { return "yellow" }
    return "red";
}

sub check_load {
    my $host = shift;

    my $load_check_url = "http://ens-prod-1.ebi.ac.uk:5002/hosts/$host";
    my $request = HTTP::Request->new(GET => "$load_check_url");
    $request->header( 'Content-Type' => 'application/json' );
    my $ua = LWP::UserAgent->new;
    my $response = $ua->request($request);
    my $content = $response->content();
    my $loads;
    eval {
      my $host_info = decode_json($content);
      foreach my $k ( ('load_1m', 'load_5m', 'load_15m', 'disk_used_pct', 'n_cpus') ) {
        $loads->{$k} = $host_info->{$k};
      }
      1;
    }
    or do {
      foreach my $k ( ('load_1m', 'load_5m', 'load_15m', 'disk_used_pct') ) {
        $loads->{$k} = "-";
      }
    };
    return $loads;
}

sub get_serverlist {
    my $type = shift;

    my %group_aliases = (
        'prod' => 'production',
        'p'    => 'production',
        'comp' => 'compara',
        'c'    => 'compara',
	'gb'   => 'genebuild',
    );


    my @these_servers;
    if ( $type eq 'all' ) {
        foreach my $k ( keys %servers_per_group ) {
            push(@these_servers, @{$servers_per_group{$k}});
            push(@these_servers, 'break');
        }
        pop @these_servers; # remove trailing 'break'
    } elsif ( defined $servers_per_group{$type} ) {
        @these_servers = @{$servers_per_group{$type}};
    } elsif ( defined $servers_per_group{ $group_aliases{$type} } ) {
        @these_servers = @{ $servers_per_group{ $group_aliases{$type} } };
    } else {
        die "Unknown group '$type'\n";
    }

    @these_servers = grep { $_ =~ /$server_regex/ || $_ eq 'break' } @these_servers if $server_regex;

    return \@these_servers;
}
